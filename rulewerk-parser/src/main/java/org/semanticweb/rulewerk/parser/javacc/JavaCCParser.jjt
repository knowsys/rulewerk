/*-
 * #%L
 * rulewerk-parser
 * %%
 * Copyright (C) 2018 - 2020 Rulewerk Developers
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

options
{
	// Use \ u escapes in streams AND use a reader for the query
	// => get both raw and escaped unicode
	JAVA_UNICODE_ESCAPE = true;
	UNICODE_INPUT = false;

	STATIC = false;
	// DEBUG_PARSER = true;
	// DEBUG_LOOKAHEAD = true;
	// DEBUG_TOKEN_MANAGER = true;

	TRACK_TOKENS = true;
}

PARSER_BEGIN(JavaCCParser)
package org.semanticweb.rulewerk.parser.javacc;

import java.net.URI;
import java.net.URISyntaxException;

import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.ArrayDeque;
import java.util.Deque;

import org.semanticweb.rulewerk.parser.ParsingException;
import org.semanticweb.rulewerk.parser.javacc.JavaCCParserBase;
import org.semanticweb.rulewerk.core.exceptions.PrefixDeclarationException;

import org.semanticweb.rulewerk.core.model.api.Statement;
import org.semanticweb.rulewerk.core.model.api.Rule;
import org.semanticweb.rulewerk.core.model.api.Literal;
import org.semanticweb.rulewerk.core.model.api.NegativeLiteral;
import org.semanticweb.rulewerk.core.model.api.PositiveLiteral;
import org.semanticweb.rulewerk.core.model.api.Fact;
import org.semanticweb.rulewerk.core.model.api.Term;
import org.semanticweb.rulewerk.core.model.api.Constant;
import org.semanticweb.rulewerk.core.model.api.DataSource;
import org.semanticweb.rulewerk.core.model.api.PrefixDeclarationRegistry;
import org.semanticweb.rulewerk.core.model.api.Argument;
import org.semanticweb.rulewerk.core.model.api.Command;
import org.semanticweb.rulewerk.core.reasoner.KnowledgeBase;

import org.semanticweb.rulewerk.core.model.implementation.Expressions;

public class JavaCCParser extends JavaCCParserBase
{
	private SubParserFactory getSubParserFactory() {
		return new SubParserFactory(this);
	}

	public void ensureEndOfInput() throws ParseException {
		jj_consume_token(EOF);
	}
}

PARSER_END(JavaCCParser)

TOKEN_MGR_DECLS : {
	// use initializer block to work around auto-generated constructors.
	{
		states = new ArrayDeque<Integer>();
	}

	Deque<Integer> states;

	void pushState() {
		states.push(curLexState);
	}

	void popState() {
		SwitchTo(states.pop());
	}
}

SimpleNode parse() throws ParsingException, PrefixDeclarationException : {
} {
	( base() )?
	( prefix() )*
	( source() )*
	( statement() )*
	< EOF > { return jjtThis; }
}

void base() throws ParsingException, PrefixDeclarationException : {
	Token iri;
} {
	< BASE > iri = < IRI_ABSOLUTE > < DOT > {
		setBase(iri.image);
	}
}

String prefixName() : {
	Token pn;
} {
	pn = < COLON > { return pn.image; }
  | pn = < PNAME_NS > { return pn.image; }
}

void prefix() throws ParsingException, PrefixDeclarationException : {
	String pn;
	String iri;
} {
	< PREFIX > pn = prefixName() iri = absoluteIri() < DOT > {
		setPrefix(pn, iri);
	}
}

String absoluteIri() throws ParsingException, PrefixDeclarationException : {
	Token iri;
} {
	iri = < IRI_ABSOLUTE > { return absolutizeIri(iri.image); }
  | iri = < PNAME_LN > { return resolvePrefixedName(iri.image); }
}

void source() throws ParsingException, PrefixDeclarationException : {
    String predicateName;
    DataSource dataSource;
    Token arity;
} {
    < SOURCE > predicateName = predicateName() arity = < ARITY > < COLON > dataSource = dataSource() < DOT >
    {
      int nArity;
      // Do not catch NumberFormatException: < INTEGER > matches must parse as int in Java!
      nArity = Integer.parseInt(arity.image);

      addDataSource(predicateName, nArity, dataSource);
    }
}

DataSource dataSource() throws ParsingException, PrefixDeclarationException : {
	PositiveLiteral positiveLiteral;
	List< Argument > arguments;
} {
	positiveLiteral = positiveLiteral(FormulaContext.HEAD) {
		return parseDataSourceSpecificPartOfDataSourceDeclaration(positiveLiteral);
    }
}

KnowledgeBase directive() throws ParsingException, PrefixDeclarationException : {
	Token name;
	List< Argument > arguments;
} {
	name = < CUSTOM_DIRECTIVE > arguments = Arguments() < DOT > {
		return parseDirectiveStatement(name.image, arguments, getSubParserFactory());
	}
}

Command command() throws ParsingException, PrefixDeclarationException : {
	Token name, pn, arity;
	LinkedList< Argument > arguments;
    String predicateName;

} {
	name = < CUSTOM_DIRECTIVE >
	( LOOKAHEAD(predicateName() < ARITY > <DOT >) predicateName = predicateName() arity = < ARITY > < DOT > {
	        Argument argument = Argument.term(Expressions.makeDatatypeConstant(predicateName + "[" + arity.image + "]:", PrefixDeclarationRegistry.XSD_STRING));
	  		return new Command(name.image, Arrays.asList(argument));
	  	}
    | LOOKAHEAD(predicateName() < ARITY >) predicateName = predicateName() arity = < ARITY > < COLON > arguments = Arguments() < DOT > {
	  		arguments.addFirst(Argument.term(Expressions.makeDatatypeConstant(predicateName + "[" + arity.image + "]:", PrefixDeclarationRegistry.XSD_STRING)));
	  		return new Command(name.image,arguments);
	  	}
    | arguments = Arguments() < DOT > { return new Command(name.image,arguments); }
	| pn = < PNAME_NS > arguments = Arguments() < DOT > {
	  		arguments.addFirst(Argument.term(Expressions.makeDatatypeConstant(pn.image, PrefixDeclarationRegistry.XSD_STRING)));
	  		return new Command(name.image,arguments);
	  	}
	| < DOT > { return new Command(name.image, new LinkedList< Argument >()); }
	)
}

void statement() throws ParsingException, PrefixDeclarationException : {
    Statement statement;
	KnowledgeBase knowledgeBase;
    resetVariableSets();
} {
    ( LOOKAHEAD(rule()) statement = rule() { addStatement(statement); }
	| statement = fact(FormulaContext.HEAD) { addStatement(statement); }
    | knowledgeBase = directive() { setKnowledgeBase(knowledgeBase); }
    )
}

Rule rule() throws ParsingException, PrefixDeclarationException : {
  Rule rule;
} {
  rule = ruleNoDot() < DOT > {
    return rule;
  }
}

Rule ruleNoDot() throws ParsingException, PrefixDeclarationException : {
    List < PositiveLiteral > head;
    List < Literal > body;
} {
    head = listOfPositiveLiterals(FormulaContext.HEAD) < ARROW > body = listOfLiterals(FormulaContext.BODY) {
        // check that the intersection between headExiVars and BodyVars is empty
        for (String variable : headExiVars) {
          if (bodyVars.contains(variable))
            throw new ParseException("Malformed rule " + head + " :- " + body + "\nExistential variable " + variable + " also used in rule body.");
        }

        // check that bodyVars contains headUniVars
        for (String variable : headUniVars) {
          if (!bodyVars.contains(variable))
            throw new ParseException("Unsafe rule " + head + " :- " + body  + "\nUniversal variable " + variable + " occurs in head but not in body.");
        }

        return Expressions.makeRule(Expressions.makePositiveConjunction(head), Expressions.makeConjunction(body));
    }
}

List < PositiveLiteral > listOfPositiveLiterals(FormulaContext context) throws ParsingException, PrefixDeclarationException : {
    PositiveLiteral l;
    List < PositiveLiteral > list = new ArrayList < PositiveLiteral > ();
} {
	l = positiveLiteral(context) { list.add(l); } ( < COMMA > l = positiveLiteral(context) { list.add(l); } )* {
		return list;
	}
}

List < Literal > listOfLiterals(FormulaContext context) throws ParsingException, PrefixDeclarationException : {
    Literal l;
    List < Literal > list = new ArrayList < Literal > ();
} {
    l = literal(context) { list.add(l); } ( < COMMA > l = literal(context) { list.add(l); } )* {
		return list;
	}
}

Literal literal(FormulaContext context) throws ParsingException, PrefixDeclarationException : {
    Literal l;
} {
    ( l = positiveLiteral(context)
	| l = negativeLiteral(context) ) {
		return l;
	}
}

PositiveLiteral positiveLiteral(FormulaContext context) throws ParsingException, PrefixDeclarationException : {
    Token t;
    List < Term > terms;
    String predicateName;
} {
    predicateName = predicateName() < LPAREN > terms = listOfTerms(context) < RPAREN > {
		return Expressions.makePositiveLiteral(createPredicate(predicateName,terms.size()), terms);
	}
}

Fact fact(FormulaContext context) throws ParsingException, PrefixDeclarationException : {
    Token t;
    List < Term > terms;
    String predicateName;
} {
    predicateName = predicateName() < LPAREN > terms = listOfTerms(context) < RPAREN > < DOT > {
      try {
      	return Expressions.makeFact(createPredicate(predicateName,terms.size()), terms);
      } catch (IllegalArgumentException e) {
		  throw makeParseExceptionWithCause("Error parsing fact: " + e.getMessage(), e);
      }
    }
}

NegativeLiteral negativeLiteral(FormulaContext context) throws ParsingException, PrefixDeclarationException : {
    List < Term > terms;
    String predicateName;
} {
    < TILDE > predicateName = predicateName() < LPAREN > terms = listOfTerms(context) < RPAREN > {
		return Expressions.makeNegativeLiteral(createPredicate(predicateName,terms.size()), terms);
	}
}

List < Term > listOfTerms(FormulaContext context) throws ParsingException, PrefixDeclarationException : {
    Term t;
    List < Term > list = new ArrayList < Term > ();
} {
    t = term(context) { list.add(t); } ( < COMMA > t = term(context) { list.add(t); } )* {
		return list;
	}
}

String predicateName() throws ParsingException, PrefixDeclarationException : {
    Token t;
	String s;
} {
	s = absoluteIri() { return s; }
  |	t = < VARORPREDNAME > { return absolutizeIri(t.image); }
}

Term term(FormulaContext context) throws ParsingException, PrefixDeclarationException : {
    Token t;
    String s;
    Constant c;
	Term tt;
} {
    s = absoluteIri() { return createConstant(s); }
  | t = < VARORPREDNAME > { return createConstant(t.image); }
  | LOOKAHEAD( < NAMED_NULL >, { isParsingOfNamedNullsAllowed() })
  	t = < NAMED_NULL > {
		if (context == FormulaContext.BODY) {
			throw new ParseException("Named nulls may not appear in the body of a rule.");
		}

		return createNamedNull(t.image);
	}
  | c = NumericLiteral() { return c; }
  | c = RDFLiteral() { return c; }
  | t = < UNIVAR > {
        s = t.image.substring(1);
        if (context == FormulaContext.HEAD)
            headUniVars.add(s);
        else if (context == FormulaContext.BODY)
            bodyVars.add(s);
        return createUniversalVariable(s);
    }
  | t = < EXIVAR > {
        s = t.image.substring(1);
        if (context == FormulaContext.HEAD)
            headExiVars.add(s);
        if (context == FormulaContext.BODY)
            throw new ParseException("Existentialy quantified variables can not appear in the body. Line: " + t.beginLine + ", Column: "+ t.beginColumn);
        return createExistentialVariable(s);
    }
  | try {
		tt = ConfigurableLiteral () { return tt; }
	} catch (ParsingException e) {
		throw makeParseExceptionWithCause("Invalid configurable literal expression", e);
	}
}

Constant NumericLiteral() : {
    Token t;
} {
    t = < INTEGER > { return createConstant(t.image, PrefixDeclarationRegistry.XSD_INTEGER); }
  | t = < DECIMAL > { return createConstant(t.image, PrefixDeclarationRegistry.XSD_DECIMAL); }
  | t = < DOUBLE > { return createConstant(t.image, PrefixDeclarationRegistry.XSD_DOUBLE); }
}

Constant RDFLiteral() throws ParsingException, PrefixDeclarationException : {
    String lex;
    Token lang = null;   // Optional lang tag and datatype.
    String dt = null;
} {
    lex = String() ( lang = < LANGTAG > | < DATATYPE > dt = absoluteIri() )? {
		if (lang != null) {
			return createLanguageStringConstant(lex, lang.image);
		}
		return createConstant(lex, dt);
	}
}

Term ConfigurableLiteral() throws ParsingException : {
	String s;
	Token t;
} {
	( LOOKAHEAD( < PIPE_DELIMITED_LITERAL >,
				 { isConfigurableLiteralRegistered(ConfigurableLiteralDelimiter.PIPE) } )
	 t = < PIPE_DELIMITED_LITERAL > {
		return parseConfigurableLiteral(ConfigurableLiteralDelimiter.PIPE, t.image, getSubParserFactory());
	 }
	 | LOOKAHEAD( < HASH_DELIMITED_LITERAL >,
				  { isConfigurableLiteralRegistered(ConfigurableLiteralDelimiter.HASH) } )
	 t = < HASH_DELIMITED_LITERAL > {
		return parseConfigurableLiteral(ConfigurableLiteralDelimiter.HASH, t.image, getSubParserFactory());
	 }
	 | LOOKAHEAD( < LPAREN >,
	 			  { isConfigurableLiteralRegistered(ConfigurableLiteralDelimiter.PAREN) } )
	 s = parenDelimitedLiteral() {
	 	return parseConfigurableLiteral(ConfigurableLiteralDelimiter.PAREN, s, getSubParserFactory());
	 }
	 | LOOKAHEAD( < LBRACE >,
				  { isConfigurableLiteralRegistered(ConfigurableLiteralDelimiter.BRACE) } )
	  s = braceDelimitedLiteral() {
		return parseConfigurableLiteral(ConfigurableLiteralDelimiter.BRACE, s, getSubParserFactory());
	 }
	 | LOOKAHEAD( < LBRACKET >,
	 			  { isConfigurableLiteralRegistered(ConfigurableLiteralDelimiter.BRACKET) } )
	  s = bracketDelimitedLiteral() {
	 	return parseConfigurableLiteral(ConfigurableLiteralDelimiter.BRACKET, s, getSubParserFactory());
	 }
	 )
}

String parenDelimitedLiteral() : {
	String s;
	StringBuilder sb = new StringBuilder();
} {
	< LPAREN > ( s = parenDelimitedLiteralBody() { sb.append(s); } )* < RPAREN > {
		return sb.toString();
	}
}

String parenDelimitedLiteralBody() : {
	Token t;
	String s;
} {
	t = < UNPAREN > { return t.image; }
	| ( < LPAREN > s = parenDelimitedLiteralBody() < RPAREN > ) { return "(" + s + ")"; }
}

String braceDelimitedLiteral() : {
	String s;
	StringBuilder sb = new StringBuilder();
} {
	< LBRACE > ( s = braceDelimitedLiteralBody() { sb.append(s); } )* < RBRACE > {
		return sb.toString();
	}
}

String braceDelimitedLiteralBody() : {
	Token t;
	String s;
} {
	t = < UNBRACE > { return t.image; }
	| ( < LBRACE > s = braceDelimitedLiteralBody() < RBRACE > ) { return "{" + s + "}"; }
}

String bracketDelimitedLiteral() : {
	String s;
	StringBuilder sb = new StringBuilder();
} {
	< LBRACKET > ( s = bracketDelimitedLiteralBody() { sb.append(s); } )* < RBRACKET > {
		return sb.toString();
	}
}

String bracketDelimitedLiteralBody() : {
	Token t;
	String s;
} {
	t = < UNBRACKET > { return t.image; }
	| ( < LBRACKET > s = bracketDelimitedLiteralBody() < RBRACKET > ) { return "[" + s + "]"; }
}

String String() : {
    Token t;
} {
    ( t = < SINGLE_QUOTED_STRING >
    | t = < DOUBLE_QUOTED_STRING >
    | t = < TRIPLE_QUOTED_STRING >
    | t = < SIXFOLD_QUOTED_STRING >
	) { return unescapeStr(t.image, t.beginLine, t.beginColumn); }
}

LinkedList< Argument > Arguments() throws ParsingException, PrefixDeclarationException : {
	Argument argument;
    String str;
    Rule rule;
    PositiveLiteral positiveLiteral;
	Term t;
    LinkedList< Argument > rest = new LinkedList< Argument >();
} {
    ( LOOKAHEAD(ruleNoDot()) rule = ruleNoDot() { argument = Argument.rule(rule); }
    | LOOKAHEAD(positiveLiteral(FormulaContext.HEAD)) positiveLiteral = positiveLiteral(FormulaContext.HEAD) { argument = Argument.positiveLiteral(positiveLiteral); }
    | t = term(FormulaContext.HEAD) { argument = Argument.term(t); }
    ) [rest = Arguments()] {
		rest.addFirst(argument);
        return rest;
    }
}

String PrefixedName() throws ParsingException, PrefixDeclarationException : {
    Token t;
} {
	t = < PNAME_LN > { return resolvePrefixedName(t.image); }
}

// ------------------------------------------

// Whitespace
< * > SKIP : {
  < WHITESPACE : [ " ", "\t", "\n", "\r", "\f" ] >
}

// Comments
< DEFAULT, BODY, DIRECTIVE_ARGUMENTS > SKIP : {
  < COMMENT : "%" ( ~[ "\n" ] )* "\n" >
}

MORE : {
  "@": DIRECTIVE
}

< DEFAULT, TERM, DIRECTIVE_ARGUMENTS, BODY > MORE : {
	"<" { pushState(); } : ABSOLUTE_IRI
}

< DEFAULT, BODY, TERM, DIRECTIVE_ARGUMENTS > TOKEN : {
  < VARORPREDNAME : < A2Z> (< A2ZND >)* >
  | < #A2Z : [ "a"-"z", "A"-"Z" ] >
  | < #A2ZN : [ "a"-"z", "A"-"Z", "0"-"9" ] >
  | < #A2ZND : [ "a"-"z", "A"-"Z", "0"-"9", "-", "_" ] >
  | < PNAME_LN : (< PN_PREFIX >)? ":" < PN_LOCAL > >
  | < PNAME_NS : < PN_PREFIX > ":" >
  | < #PN_CHARS_BASE : [ "a"-"z", "A"-"Z", "\u00c0"-"\u00d6",
						 "\u00d8"-"\u00f6", "\u00f8"-"\u02ff",
						 "\u0370"-"\u037d", "\u037f"-"\u1fff",
						 "\u200c"-"\u200d", "\u2070"-"\u218f",
						 "\u2c00"-"\u2fef", "\u3001"-"\ud7ff",
						 "\uf900"-"\ufffd" ] >
  | < #PN_CHARS_U : < PN_CHARS_BASE > | "_" >
  | < #PN_CHARS : ( < PN_CHARS_U > | [ "-", "0"-"9", "\u00b7",
									   "\u0300"-"\u036f",
									   "\u203f"-"\u2040" ] ) >
  | < #PN_PREFIX : < PN_CHARS_BASE >
		( ( < PN_CHARS > | "." )* < PN_CHARS > )? >
  | < #PN_LOCAL : ( < PN_CHARS_U > | [ ":", "0"-"9" ] )
		( ( < PN_CHARS > | [ ".", ":" ] )* < PN_CHARS > )? >
  |	< COMMA : "," >
  | < NAMED_NULL : "_:" ( < PN_CHARS_U > | [ "0"-"9" ] ) (( < PN_CHARS > | "." )* < PN_CHARS > )? > {
		matchedToken.image = JavaCCParserBase.stripChars(matchedToken.image, 2);
	}
}

< DEFAULT, BODY, TERM, DIRECTIVE_ARGUMENTS, PAREN_DELIMITED > TOKEN : {
	< LPAREN : "(" > {
		pushState();

		if (curLexState == TERM) {
			SwitchTo(PAREN_DELIMITED);
		} else if (curLexState == DEFAULT || curLexState == BODY) {
			SwitchTo(TERM);
		}
	}
  | < RPAREN : ")" > { popState(); }
}

< TERM, DIRECTIVE_ARGUMENTS > TOKEN : {
  < INTEGER : (< SIGN >)? < DIGITS > >
  | < DECIMAL : (< SIGN >)? ( < DIGITS > "." (< DIGIT >)*
							  | "." < DIGITS > ) >
  | < DOUBLE : (< SIGN >)? ( < DIGITS > "." (< DIGIT >)* < EXPONENT >
                           | "." (< DIGITS >) (< EXPONENT >)
                           | < DIGITS > < EXPONENT > ) >
  | < #SIGN : [ "+", "-" ] >
  | < #DIGIT : [ "0"-"9" ] >
  | < #DIGITS : (< DIGIT >)+ >
  | < #EXPONENT : [ "e", "E" ] (< SIGN >)? < DIGITS > >
  | < COLON : ":" >
}

< DEFAULT, BODY, DIRECTIVE_ARGUMENTS > TOKEN : {
  < ARROW : ":-" >
}

< DEFAULT, BODY, DIRECTIVE_ARGUMENTS > TOKEN : {
  < TILDE : "~" >
}

< ABSOLUTE_IRI > TOKEN : {
	< IRI_ABSOLUTE : (~[ ">", "<", "\"", "{", "}", "^", "\\", "|", "`", "\u0000"-"\u0020" ])* ">" > {
			  matchedToken.image = JavaCCParserBase.stripDelimiters(matchedToken.image, 1);
			  popState();
		  }
}

< DIRECTIVE > TOKEN : {
    < BASE : "base" > : DIRECTIVE_ARGUMENTS
  | < PREFIX : "prefix" > : DIRECTIVE_ARGUMENTS
  | < SOURCE : "source" > : DIRECTIVE_ARGUMENTS
  | < CUSTOM_DIRECTIVE : < DIRECTIVENAME > > {
		matchedToken.image = JavaCCParserBase.stripChars(matchedToken.image, 1);
	}: DIRECTIVE_ARGUMENTS
  | < DIRECTIVENAME : [ "a"-"z", "A"-"Z" ] ([ "a"-"z", "A"-"Z", "0"-"9", "-", "_" ])* >
}

< DEFAULT, BODY, DIRECTIVE_ARGUMENTS > TOKEN : {
	< DOT : "." > : DEFAULT
}

< DIRECTIVE_ARGUMENTS > TOKEN : {
  < ARITY : "[" < INTEGER > "]" > {
			  matchedToken.image = JavaCCParserBase.stripDelimiters(matchedToken.image, 1);
		  }
  | < ARGUMENT_NAME : < DIRECTIVENAME > >
}

< TERM, DIRECTIVE_ARGUMENTS > TOKEN : {
	< UNIVAR : "?" < VARORPREDNAME > >
  | < EXIVAR : "!" < VARORPREDNAME > >
  | < LANGTAG : "@" ( < A2Z > )+ ( "-" ( < A2ZN > )+ )? > {
		matchedToken.image = JavaCCParserBase.stripChars(matchedToken.image, 1);
	}
  | < DATATYPE : "^^" >
}

< TERM, DIRECTIVE_ARGUMENTS > MORE : {
  < "'" > { pushState(); } : SINGLE_QUOTED
  | < "\"" > { pushState(); } : DOUBLE_QUOTED
  | < "'''" > { pushState(); }: TRIPLE_QUOTED
  | < "\"\"\"" > { pushState(); } : SIXFOLD_QUOTED
  | < "|" > { pushState(); } : PIPE_DELIMITED
  | < "#" > { pushState(); } : HASH_DELIMITED
}

< TERM, BRACE_DELIMITED > TOKEN : {
	< LBRACE : "{" > { pushState(); } : BRACE_DELIMITED
}

< TERM, BRACKET_DELIMITED > TOKEN : {
    < LBRACKET : "[" > { pushState(); } : BRACKET_DELIMITED
}

< PIPE_DELIMITED > TOKEN : {
	< PIPE_DELIMITED_LITERAL : ( ~ [ "|" ] )* "|" > {
		popState();
		matchedToken.image = JavaCCParserBase.stripDelimiters(matchedToken.image, 1);
	}
}

< HASH_DELIMITED > TOKEN : {
	< HASH_DELIMITED_LITERAL : ( ~ [ "#" ] )* "#" > {
		popState();
		matchedToken.image = JavaCCParserBase.stripDelimiters(matchedToken.image, 1);
	}
}

< PAREN_DELIMITED > TOKEN : {
	< UNPAREN : ( ~ [ "(", ")" ] )+ >
}

< BRACE_DELIMITED > TOKEN : {
	< RBRACE : "}" > { popState(); }
  | < UNBRACE : (~ [ "{", "}" ] )+ >
}

< BRACKET_DELIMITED > TOKEN : {
    < RBRACKET : "]" > { popState(); }
  | < UNBRACKET : ( ~ [ "[", "]" ] )+ >
}

< SINGLE_QUOTED > TOKEN : {
	< SINGLE_QUOTED_STRING : ( ~[ "'", "\\", "\n", "\r" ]
							 | < ESCAPE_SEQUENCE > )* "'" > {
		popState();
		matchedToken.image = JavaCCParserBase.stripDelimiters(matchedToken.image, 1);
	}
}

< DOUBLE_QUOTED > TOKEN : {
	< DOUBLE_QUOTED_STRING : ( ~[ "\"", "\\", "\n", "\r" ]
							 | < ESCAPE_SEQUENCE > )* "\"" > {
		popState();
		matchedToken.image = JavaCCParserBase.stripDelimiters(matchedToken.image, 1);
	}
}

< TRIPLE_QUOTED > TOKEN : {
	< TRIPLE_QUOTED_STRING : ( ~[ "'", "\\" ]
							 | < ESCAPE_SEQUENCE >
							 | ( "'" ~[ "'" ] )
							 | ( "''" ~[ "'" ] ) )* "'''" > {
		popState();
		matchedToken.image = JavaCCParserBase.stripDelimiters(matchedToken.image, 3);
	}
}

< SIXFOLD_QUOTED > TOKEN : {
	< SIXFOLD_QUOTED_STRING : ( ~[ "\"", "\\" ]
							  | < ESCAPE_SEQUENCE >
							  | ( "\"" ~[ "\"" ] )
							  | ( "\"\"" ~[ "\"" ] ) )* "\"\"\"" > {
		popState();
		matchedToken.image = JavaCCParserBase.stripDelimiters(matchedToken.image, 3);
	}
}

< SINGLE_QUOTED, DOUBLE_QUOTED, TRIPLE_QUOTED, SIXFOLD_QUOTED > MORE : {
	< ESCAPE_SEQUENCE : "\\" [ "t", "b", "n", "r", "f", "\\", "\"", "'" ] >
}
